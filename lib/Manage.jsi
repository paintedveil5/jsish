#! /usr/bin/env jsish

require('Jsi', '2.4');

function Manage(args:array, conf:object=void) {

    const options = { // Run or create a Jsi module.
        nocommit:false,     // Do not commit.
        output  :'',        // Override the output filename default of create + .jsi.
        quiet   :false,     // No messages.
        repo    :'https://jsish.org/afossil',        // Repo source for parent of subproject
        v       :false,     // Verbose
    };
    var self = {
        rootdir      :'',   // Root directory.
        Trace       :false,
    };

    moduleOpts(options, self);
    
    function getfossil(out='') {
        if (!out)
            out = 'fossil';
        else if (File.isdir(out))
            out += '/fossil';
            
        Wget('http://jsish.org/download/fossil', {O:out});
        File.chmod(out, 0755);
    }
    
    function sunzip(foss='') {
        if (File.isdir('jsi')) {
            if (foss)
                fossil('rm --hard jsi');
            File.remove('jsi', true);
        }
        Jsi_CopyDir('/zvfs/lib/www', 'jsi');
        if (foss)
            fossil('add jsi');
    }
    
    // Clone child sub project from parent project
    function sclone(app:string='pdq', name:string='') {
        var ver;
        if (Info.platform().platform == 'unix')
            ver = exec('which fossil');
        else
            ver = fossil('version', true);
        if (!ver)
            throw '!install fossil first, eg. use "sudo apt install fossil" or "sudo jsish -M getfossil"';
        var cnt = File.glob('*', {retCount:true});
        if (cnt)
            throw '!setup must be used in an empty directory';
        
        ver = fossil('status', true);
        if (ver.match(/^repository:.*/))
            throw '!sorry: already in open fossil: '+ver.split('\n')[0];

        var dname = File.tail(File.pwd());
        
        if (!name)
            name = dname;
    
        var url = app;
        if (!app.match(/^[-0-9a-zA-Z_]+$/)) {
            app = File.rootname(File.tail(app));
            if (!app.match(/^[-0-9a-zA-Z_]+$/))
                throw '!app name invalid: '+app;
        } else
            url = self.repo+'/'+app;
        var proj = name.toUpperCase();
        if (app.toLowerCase() == proj)
            throw '!can not use name same as app: '+name;
        var pfn = name+'.fossil';
        if (url[0] == '/' && File.exists(url+'.fossil'))
            url += '.fossil';
        var ccmd = 'clone '+url+' '+pfn;
        if (!self.quiet)
            puts(ccmd);
        var cval = fossil(ccmd);
        if (!self.quiet)
            puts(cval);
        var db = new Sqlite(pfn);
        var now = parseInt(strptime()/1000);
        db.eval("DELETE FROM config WHERE name = 'parent-project-code' OR  name = 'parent-project-name' "+
            "OR  name = 'parent-project-url';"+
            "UPDATE config SET name='parent-project-code' WHERE name='project-code';"+
            "UPDATE config SET name='parent-project-name' WHERE name='project-name';");
        db.query("INSERT INTO config(name,mtime,value) VALUES('project-code',@now, lower(hex(randomblob(20))));");
        db.query("INSERT INTO config(name,mtime,value) VALUES('parent-project-url', @now,(SELECT value FROM config WHERE name == 'last-sync-url'));");
        db.query("INSERT INTO config(name,mtime,value)  VALUES('project-name', @now, @proj);");
        if (self.quiet)
            return;
        try {
          fossil('open '+pfn);
        } catch (e) {
          fossil('open -f '+pfn);
	    }
        fossil('remote-url off');
        /*if (!File.isdir('jsi')) {
            Jsi_CopyDir('/zvfs/lib/www', 'jsi');
            fossil('add jsi');
        }*/
        var dfn = 'html/index.html';
        if (!File.exists('index.html') && File.exists(dfn)) {
            var idat = File.read(dfn);
            idat = idat.map(['"../', '"']);
            File.write('index.html', idat);
        }
        var cmt = 'sclone of '+url;
        if (!self.nocommit)
            fossil('commit -m "'+cmt+'" --no-warnings --allow-empty');
        if (File.exists('main.jsi'))
            puts('DONE! To finish setup run: "jsish ."');
        else
            puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');
    }

    function surl() {
        var url = fossil(`sql "SELECT value FROM config WHERE name = 'parent-project-url'"`);
        if (!url)
            throw 'there is no parent-project-url, did you use: "jsish -m sclone"';
        if (url[0] == "'" && url.length>3)
            url = url.substr(1,url.length-3);
        return url;
    }

    function spull(opts='') {
        var url = surl();
        var dif = fossil('changes');
        if (dif)
            throw '!must run "fossil commit" first';
        return fossil('pull --from-parent-project '+opts+' '+url);
    }

    function private() {
        if (fossil('branch current') != 'private')
            fossil('commit --comment Private --private --allow-empty');
    }
    
    function fossil(str, noerr=false) {
        if (self.v)
            puts('EXEC: fossil '+str);
        if (!noerr)
            return exec('fossil '+str);
        return exec('fossil '+str, {noError:true});
    }
    
    function spupdate(opts='', msg='') {
        var cur = fossil('branch current').trim();
        if (cur != 'private')
            throw '!need to use "fossil update private" before spupdate: '+cur;
        var rs = supdate(opts+' --private', msg);
        return rs;
    }
    
    function supdate(opts='', msg='') {
        var proj = fossil("sql \"select value from config where name == 'project-name'\"").trim();
        proj = proj.trim("'");
        var tl1, tl2, tip, ispriv = (opts.indexOf('--private')>=0);
        if (!msg)
            msg = 'supdate '+opts+': '+proj;
        if (ispriv) {
            var x, y;
            tl1 = fossil('timeline');
            x = fossil('info tip');
            if (y && y.length>1)
                tip = y[1];
        }
        var s = spull(opts);
        if (ispriv) {
            tl2 = fossil('timeline');
            if (tl1 == tl2)
                return 'spull returned no changes';
        }
        var mrg = '', ms = '';
        try {
            mrg = fossil('merge');
            ms = mrg.match(/WARNING: [0-9]+ merge conflicts/);
        } catch (e) {
            return 'nothing to merge';
        }
        if (!mrg)
            return;
        if (ms) {
            puts('Conflict', mrg);
            throw '!merge conflict'+ms[0];
        }
        //var u = fossil('update'), us = u.match(/changes:\s+None. Already up-to-date/);
        //if (us) return 'no changes in update';
        if (!self.nocommit) {
            msg = msg.replace(/[^-_a-z0-9\.\/\:,]/gmi, " ");
            var cmd = 'commit -m "'+msg+'"';
            fossil(cmd);
        }
    }

    function jsonify(name) {
        var d = File.read(name);
        d = JSON.parse(d, false);
        d = JSON.stringify(d, null, 4);
        if (self.output == '-')
            puts(d);
        else if (self.output == '.')
            File.write(name, d);
        else if (self.output)
            File.write(self.output, d);
        else
            return d;
    }
    
    function es5lint(d) {
        var i, lst, isdir = File.isdir(d);
        if (isdir)
            lst = File.glob('*.js', {dir:d, recurse:true});
        else
            lst = [d];
        for (i of lst) {
            if (i.substr(i.length-7) == '.min.js') continue;
            var ft = File.tail(i);
            if (ft=='prism.js' || ft.substr(0,3)=='vue') continue;
            var di = i;
            if (isdir) di = d+'/'+i;
            var int = new Interp({noEval:true, noES6:true, scriptFile:di});
            delete int;
        }
    }

    function run(fn:string='', ...) {
        if (fn === '') {
            var lst = File.glob('/zvfs/lib/*'), rc = [];
            for (var i of lst) {
                var ft = File.tail(i), fr = File.rootname(ft);
                var ext = File.extension(ft);
                if (File.isdir(i) && File.exists(i+'/'+fr+'.jsi'))
                    rc.push(fr);
                else if (ext === '.jsi' && ft !== 'Jsish.jsi' && ft !=='autoload.jsi')
                    rc.push(fr);
            }
            throw '!missing required module name or builtin:\n    '+rc.sort().join(', ')+'\n';
        }
        require(fn);
        return moduleRun(fn);
    }
    
    function hash(fn='') {
        if (!fn)
            fn = Info.executable();
        return Util.hash('', {file:fn, type:'sha1'});
    }
    
    function vuecvt(fn:string, out='') {
      var rs = Util.vueConvert(fn);
      if (!out)
        return rs;
      if (out == '.') {
        var fext = File.extension(fn), fr = File.rootname(fn);
        if (fext == '.vue')
          out = fn+'.js';
        else
          out = File.rootname(fr)+'.vue';
      }
      File.write(out, rs);
      return out;
    }
    
    function fossroot() {
        return (File.exists('.fslckout') || File.exists('_FOSSIL_'));
    }
    
    function vuepublish(dir='.', reverse='') { // Generate .vue.js to/from .vue files.
      var opts = {recurse:true, types:'f', maxDepth:5};
      if (dir && dir != '.') {
        opts.dir =dir;
        if (dir[dir.length-1] != '/') dir+='/';
        opts.prefix = dir;
      }
      var ext = (reverse?'.vue':'.vue.js'),
        flst = [], lst = File.glob('*'+ext, opts);
      for (var i of lst) {
        var fn = (dir=='.'?i:File.join(dir, i));
        flst.push(vuecvt(fn, '.'));
      }
      if (!reverse && fossroot() && !File.exists('jsi'))
        sunzip('1');

      if (flst.length)
        fossil('add '+flst.join(' '));
    }

    function zhash(fn='') {
        if (!fn)
            fn = Info.executable();
        var str = Zvfs.list(fn);
        return Util.hash(JSON.stringify(str), {type:'sha1'});
    }

    function zcheck() {
        var fn = Info.executable();
        var zh = zhash(fn);
        var bzh = Info.version(true).zhash;
        if (zh != bzh)
            return 'zhash mismatch: builtin '+bzh+' != current '+zh;
    }
    
    function createmod(fn:string, tmpname='Module') {
        if (self.rootdir === '')
            self.rootdir=Info.scriptDir();
        var ext;
        ext = File.extension(fn);
        if (ext !== '.jsi')
            fn += '.jsi';
        if (self.output !== '')
            fn = self.output;
        if (File.exists(fn))
            throw '!file exists: '+fn;
        var pat = File.rootname(File.tail(fn));
        var pref = tmpname;
        var tmpl = File.read('/zvfs/lib/templates/'+pref+'.jsi');
        var re = new RegExp(pref,'g');
        tmpl = tmpl.replace(re, pat);
        File.write(fn, tmpl);
        File.chmod(fn, 0744);
        LogTrace('Done');
        if (!self.quiet)
            console.printf("Created module '%s' in %s\n", pat, fn);
    }
    
    var cmdList = {
        createmod:  [createmod,  "Create a .jsi module from template" ],
        es5lint:    [es5lint,    "Perform lint check with ES6 features disabled"],
        getfossil:  [getfossil,  "Download fossil executable"],
        hash:       [hash,       "Calculate sha1 hash of file"],
        jsonify:    [jsonify,    "Normalize a json file"],
        private:    [private,    'Issue "commit --private"'],
        run:        [run,        "Run a module" ],
        sclone:     [sclone,     "Clone a sub-project from fossil parent (pdq)"],
        sunzip:     [sunzip,     "Unzip the jsi directory from jsish"],
        spull:      [spull,      "Update a sub-project created with sclone: pull change only"],
        surl:       [surl,       "Get parent project url"],
        supdate:    [supdate,    "Update a sub-project created with sclone: also update/merge/commit"],
        spupdate:   [spupdate,   "Shortcut for 'supdate --private'"],
        vuepublish: [vuepublish, 'Generate .vue.js files from .vue' ],
        vuecvt:     [vuecvt,     'Convert .vue/.js file' ],        
        zcheck:     [zcheck,     "Compare zhash of jsish builtin zip"],
        zhash:      [zhash,      "Calculate sha1 hash of appended zip"]
    };
    
    return Jsi_CmdTable(args, cmdList);
}

module(Manage);
