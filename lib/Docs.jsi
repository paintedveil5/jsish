#!/usr/bin/env jsish

function Docs(args, opts) {

    const options = { // Scan markdown files in dir looking for dead internal links, extract meta and build index.json.
        outfile :'index.json',  // Output file 
        dirname  :'',           // Defaults to same as input dir
    };
    var self = {
        fall:{},
        fdata:{},
        flabels:{},
        flinks:{},
        fblocks:{},
        aflist:[],
        result:{},
        indexN:[],
        navN:[],
        projectN:{label:"JSI", title:"jsish home page", href:"https://github.com/pcmacdon/jsish"},
        filesN:[],
    };
    moduleOpts(options, self);

    //function LogDebug(...) {}
    
    function slugify(s) {
        s = s.toLowerCase().trim();
        s = s.replace(/`~!@#$%^&*()_\-+=\[\]\{\};:'"\\|\/,.<>?\s]/g, ' ');
        s = s.map(['\"', '', '    ', ' ', '   ', ' ', '  ', ' ', ' ', '-']);
        //if (s.indexOf('opt')>=0) puts('S',s);
        return s;
    }
    
    var fdir, fn = args;
    if (typeof(args) === 'array') {
        if (args.length!=1)
            throw 'single arg is required';
        fn = args[0];
    }
    var tr, j, r, t, d, f, i, th, tt;
    var lst;
    if (File.isdir(fn)) {
        fdir = fn;
        if (fn[fn.length-1]!='/') fn+='/';
        lst = File.glob('*.md', {dir:fn, prefix:fn, tails:true}).sort();
        fdir = fn;
    } else
        throw 'arg must be a dir';
    if (!self.dirname)
        self.dirname = fdir;
    var re = /^#+ [^#]+$/gm,
        rel = /\[[^]]+\]\([^)]+\)/gm, 
        reb = /```.*```/g;
    var aflist = [];
    for (i of lst) {
        f = File.tail(i);
        aflist.push(f);
    }
    for (i of lst) {
        f = File.tail(i);
        var frn = File.rootname(f);
        LogDebug("DO HEADERS", i);
        d = self.fdata[f] = File.read(i);
        r = d.match(re);
        t = [], tt = [];
        if (r) {
            for (j of r) {
                tr = j.match(/ [^#]+/);
                if (tr) {
                    var strl = slugify(tr[0].trim());
                    t.push(strl);
                    tt.push(strl, j);
                }
            }
        }
        LogDebug('R', t);
        self.flabels[f] = t;
        self.fall[f] = tt;
        //if (f == 'Reference.md') continue;
        r = d.match(rel);
        LogDebug('DO LINKS', r);
        t = [];
        if (r) {
            for (j of r) {
                tr = j.match(/\(.*\)+/);
                if (tr) {
                    var ta;
                    tr = tr[0];
                    tr = tr.substr(1,tr.length-2).split('"')[0];
                    if (tr[0] == '#') {
                        var tr0a = slugify(tr.substr(1));
                        if (self.flabels[f].indexOf(tr0a)<0)
                            puts("IN", f, "LOCAL-LINK TO UNKNOWN SECTION:", tr);
                        continue;
                        //ta = f+tr;
                    } else {
                        if (tr.indexOf('://')>0) continue;
                        th = tr.trim().split('#');
                        var t0 = th[0].trim();
                        if (aflist.indexOf(t0)<0) {
                            puts('IN',f,'FILE NOT FOUND:"'+t0+'" FROM "'+tr+'"');
                            continue;
                        }
                        if (th.length!=2)
                            //ta = th[0];
                            continue;
                        else
                            ta = th[0] + '#' + th[1];
                    }
                    t.push(ta.trim());
                }
            }
        }
        self.flinks[f] = t;
        LogDebug('L', t);
        r = d.match(reb);
        LogDebug('DO BLOCKS', r);
        self.fblocks[f] = r;
        r = d.match(/^<!-- meta:.* -->$/m);
        var fidxI = 1001;
        if (r) {
            var mets = r[0].substr(10, r[0].length-13);
            var meta;
            try {
                 meta = JSON.parse(mets);
            } catch(e) {
                puts("IN "+f+' ignored bad meta: ', e);
                //throw "meta parse error in "+f, e;
            }
            var file = (meta?meta.file:null),
                nav = (meta?meta.navindex:null), sys = (meta?meta.project:null);
            if (file) {
                if ((i=file.index))
                    fidxI = i;
                if ((i=file.navindex)) {
                    if (self.navN[i])
                        self.navN[i].push(frn);
                    else
                        self.navN[i] = [frn];
                }
            }
            if (sys)
                self.projectN = Object.assign(sys);
        }
        if (self.indexN[fidxI])
            self.indexN[fidxI].push(f);
        else
            self.indexN[fidxI] = [f];
    }
    for (f in self.flinks) {
        var fl = self.flinks[f];
        if (!fl) {log('no links',f); continue; }
        LogDebug(f,'fl',fl);
        for (tr of fl) {
            th = tr.trim().split('#');
            if (th.length!=2) {
                //ta = th[0];
                continue;
            } else {
                var x0 = th[0].trim();
                ta = x0 + '#' + th[1];
                var xx = self.flabels[x0];
                if (!xx || xx.indexOf(th[1].toLowerCase())<0)
                    puts("IN", f, "NONLOCAL-LINK TO UNKNOWN SECTION:", tr);
            }
        }
    }
    self.result = {
        sections: self.fall,
        files:self.indexN.flat().concat(self.filesN),
        navFns:self.navN.flat(),
        project:self.projectN,
    };

    if (!self.outfile)
        return self.result;
    File.write(File.join(self.dirname,self.outfile), JSON.stringify(self.result));
}

module(Docs);

