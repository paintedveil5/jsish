#!/usr/local/bin/jsish %s -Debug true Socket.conf

require('Jsish');

function Help(args, ...) {

    const options = { // Provide help for Jsi commands.
        max         :32,        // Max lines to output, if not web
        timeout     :10000,     // Time to wait for browser to open with -web.
        web         :false,     // Format for the web.
        wiki        :false      // For -web, return instead of opening browser.
    };
    var self = {
        rootdir:Info.scriptDir(),
    };
    var index = "";
    var optsDumped = [];
    
    moduleOpts(options, self);

    function DumpOpts(opts:array, hlp:string, nam:string, nam2:string=void) {
        var web = self.web, sbt='', ebt='';
        if (web) { sbt='<b>'; ebt='</b>'; }
        //if (cnam.indexOf('.')<0) cnam=cnam+'.conf';
        var rv = '';//, opts = Info.cmds(cnam).options;
        if (!web)
            rv += '\n['+nam+' options]\nOption\t\tType\tDescription [Flags]\n' + '-'.repeat(76)+'\n';
        else {
            rv += '\n\n<a name="'+nam+'Options"></a>\n';
            if (nam2)
                rv += '<a name="'+nam2+'Options"></a>\n';
            rv += '<h4>Options for "'+nam+'"</h4>\n'; //+hlp;
            rv += "<table border='1' class=optstbl>\n";
            rv += "<tr><th>Option</th> <th>Type</th> <th>Description</th><th>Flags</th></tr>\n";
        }
        //puts(opts);
        var srv = '', cnt = 0;
        for (var o in opts) {
            var ci = opts[o];
            if (isconf && ci.initOnly) continue;
            cnt++;
            var help = (ci.help?ci.help+'.':'');
            var flags = '';
            if (ci.readOnly)
                flags += 'readOnly';
            if (ci.initOnly)
                flags += (flags===''?'':'|')+'initOnly';
            if (ci.required)
                flags += (flags===''?'':'|')+'required';
            if (ci.noCase)
                flags += (flags===''?'':'|')+'noCase';
            var type = ci.type;
            if (ci.customArg) {
                if (ci.customArg.subSpec) {
                    var nsrv = DumpOpts(ci.customArg.subSpec, ci.customArgHelp, ci.name);
                    if (nsrv !== '') {
                        if (web)
                            type="<a href='#"+ci.name+"Options'>options</a>";
                        else
                            type='options';
                        srv += nsrv;
                    }
                }
                else if (ci.customArg.enumList) {
                    help += " (one of: "+sbt+ci.customArg.enumList.join(ebt+", "+sbt)+ebt+")";
                    type="STRKEY";
                }
                else if (ci.customArg.bitSet) {
                    help += " (zero or more of: "+sbt+ci.customArg.bitSet.join(ebt+", "+sbt)+ebt+')';
                    type="ARRAY";
                }
            }
            if (ci.args)
                help += " @function("+ci.args+")";
            if (web)
                rv += "<tr><td>"+ci.name+"</td><td><i>"+type+"</i></td><td>"+ help +"</td><td><i>"+flags+"</i></td></tr>\n";
            else {
                if (flags !== '') flags = '\t['+flags+']';
                var cinam = ci.name;
                if (cinam.length<8) cinam+='\t';
                rv += cinam+"\t"+type+"\t"+help+flags+'\n';
            }
        }
        if (!cnt) return '';
        if (web) {
            rv += "</table>\n";
            if (srv !== '') {
                if (optsDumped.indexOf(srv)>=0)
                    srv = '';
                optsDumped.push(srv);
            }
        }
        return rv + srv;
    }

    function DumpCmd(cinf:object) {
        LogTrace('DumpCmd');
        var web = self.web, rv = '', ret = '', nl=(web?'\n\n':'\n');
        if (cinf.retType != "any")
            ret = ':'+cinf.retType;
        var cnam = format("%s(%s)%s", cinf.name, cinf.args, ret);
        if (!web) {
            rv += cnam+'\n';
        } else {
            if (cinf.name.indexOf('.')<0)
                index += "<a href='#"+cinf.name+"'>"+cinf.name+"</a>\n";
            rv += '<a name="'+cinf.name+'"></a>\n';
            rv += '\n<hr>\n';
            rv += '\n\n<h2>'+cinf.name+'</h2>\n\n';
            rv += format("<font color=red>Synopsis: %s(%s)%s</font><p>\n\n", cinf.name, cinf.args, ret);
        }
        if (cinf.help)
            rv += cinf.help+'.'+nl;
        if (cinf.info)
            rv += cinf.info+nl;
        if (cinf.options) {
            LogTrace('Options:', cinf.options);
            rv += DumpOpts(cinf.options, cinf.optHelp, cinf.name);
        }
        if (web) {
            rv += '<a name="'+cinf.name+'end"></a>\n';
            rv += '\n<p><a href="#TOC">Return to top</a>\n\n';
        }
        return rv;
    }
    function LinkOpts(astr:string, name:string) {
        var ii;
        if (!self.web || (ii=astr.indexOf('options'))<0)
            return astr;
        var ss = '';
        if (ii>0)
            ss += astr.slice(0, ii);
        ss += "<a href='#"+name+"Options'>options</a>";
        ss += astr.slice(ii+7);
        return ss;
    }

    function DumpObj(tinf:object) {
        LogTrace('DumpObj');
        var hasconf, ro = '', rv = '', ci, cnam = tinf.name, subs=[], ret = '', cmds;
        var web=self.web, nl=(web?'\n\n':'\n');
        var csig, re1 = new RegExp('^'+cnam+'.[_a-zA-Z0-9]+$');
        cmds = Info.cmds(re1,{constructor:true,full:true});
        if (tinf.constructor) {
            if (tinf.retType != "any")
                ret = ':'+tinf.retType;
            csig = 'new '+cnam+"("+tinf.args+")"+ret+nl;
        } else {
            csig = cnam+".method(...)"+nl;
        }

        if (!web) {
            rv += csig;
            var clst = [], pos = cnam.length+1;
            for (var i of cmds)
                if (i !== cnam+'.'+cnam)
                    clst.push(i.substr(pos));
                else {
                    ci = Info.cmds(cnam+'.'+cnam,{constructor:true});
                    if (ci) {
                        if (ci.help)
                            rv += ci.help+nl;
                        if (ci.info)
                            rv += ci.info+nl;
                    }
                }
        } else {
            if (tinf.name.indexOf('.')<0)
                index += "<a href='#"+tinf.name+"'>"+cnam+"</a>\n";
            rv += '<a name="'+tinf.name+'"></a>\n';
            rv += '\n<hr>\n';
            rv += '\n\n<h2>'+cnam+'</h2>\n\n';
            rv += "<font color=red>Synopsis:"+csig;
            rv += "</font><p>";
        }
        if (tinf.help)
            rv += tinf.help+nl;
        if (tinf.info)
            rv += tinf.info+nl;
        if (!web) {
            rv += 'Methods: '+clst.join(' ')+'\n';
        } else {
            rv += "\n<h4>Methods for \""+cnam+"\"</h4>\n";
            rv += "<table border='1' class=cmdstbl>\n";
            rv += '<tr><th>Method</th><th>Prototype</th><th>Description</th></tr>\n';
            var clnknam = null;
            if (tinf.constructor) {
                ci = Info.cmds(cnam+'.'+cnam,{constructor:true});
                var conhelp = (ci.help?ci.help+'.':''), aastr, tret = '';
                if (ci.retType != "any")
                    tret = ':'+ci.retType;
                if (ci.info) conhelp += ci.info;
                aastr = tinf.args;
                if (tinf.options)
                    aastr = LinkOpts(aastr, "new "+cnam);
                rv += "<tr><td>"+cnam+"</td><td>new "+cnam+"("+aastr+")"+tret+" </td><td>"+conhelp+'</td></tr>\n';
            }
        }
        if (cmds !== undefined) {
            for (var cmd of cmds) {
                var namspl = cmd.split('.'), nam = namspl[namspl.length-1];
                tret = '';
                if (nam == cnam)
                    continue;
                ci = Info.cmds(cnam+'.'+nam);
                if (ci.retType !== "any")
                    tret = ':'+ci.retType;
                conhelp = (ci.help?ci.help+'.':'');
                if (ci.info) conhelp += ' '+ci.info;
                if (ci.options) {
                    if (!clnknam) clnknam=nam;
                    if (!tinf.constructor || nam !== 'conf')
                        ro += DumpOpts(ci.options, ci.optHelp, cnam+'.'+nam, cnam+'.conf');
                    aastr = LinkOpts(ci.args, cnam+'.'+nam);
                } else {
                    aastr = ci.args;
                }
                //if (nam == 'conf') hasconf = ci.options;
               // if (!aastr) aastr='';
                if (web)
                    rv += "<tr><td>"+nam+"</td><td>"+nam+"("+aastr+")"+tret+" </td><td>"+conhelp+'</td></tr>\n';
                if (ci.flags && ci.flags&8)
                    subs.push(ci);
            }
        }
        if (web)
            rv += "</table>\n";
        if (tinf.options && nam !== 'conf')
            rv += DumpOpts(tinf.options, tinf.optHelp, 'new '+cnam, cnam+'.'+'conf');
        rv += ro;
        if (web) {
            rv += '<a name="'+tinf.name+'end"></a>\n';
            rv += '<p><a href="#TOC">Return to top</a>\n';
        }
        for (ci of subs)
            rv += DumpObj(ci);
        return rv;
    }
    
    function dumpWeb() {
    
        var rv = '<title>Reference</title>\n<p>', tinf, lst = Info.cmds();
        var vv = Info.version(true);
        var ver = vv.major+'.'+vv.minor+'.'+vv.release;
    
        for (var i in lst) {
            tinf = Info.cmds(lst[i]);
            switch (tinf.type) {
            case 'object':
                rv += DumpObj(tinf);
                break;
            case 'command':
                //rv += DumpCmd(tinf);
                break;
            default:
                throw "bad id";
                continue;
            }
        }
        if (self.wiki)
            rv += "</nowiki>";
        index + "\n";
        var arv = 'Builtin command reference.  See <a href="#System">System</a>  for global commands. ';
        if (self.wiki)
            arv += '(Related: [./functions.wiki|Functions], [./language.wiki|Syntax]).\n'
            + '<p>\n<a name="TOC"></a>\n<nowiki>\n';
        else
            arv += '\n<a name="TOC"></a>';
        arv += index + rv + "<p><i>(page auto-generated)</i>";
        return arv;
    }
    
    function ljoin(lst:array, max:number, pre:string) {
        var rv = '', rc = pre;
        for (var i of lst) {
            rc += i;
            if (rc.length>max) {
                rv += rc + '\n';
                rc = pre;
            } else
                rc += ' ';
        }
        rv += rc;
        return rv;
    }
    
    function help(str:string) {
        LogTrace('HELP:',str);
        str = str.trim();
        var rv = '';
        if (str === '' || str === '?' || str === 'help') {
            rv += 'Jsish interactive executes commands, uses tab for completions, and has help for '
                + 'the following builtin commands:\n\n'+ljoin(Info.cmds(), 68, '     ');
                rv += "\n\nHelp can also take options.  For example to display in a web browser try:\n\n    help -web true WebSocket";
                rv += "\n\nModule help can also be displayed (non-web), as in 'help Websrv`.\n";
                rv += 'Builtin modules include:\n\n';
                var nowork = ['Jsi_Conf', 'Jsi_Conf', 'Jsi_Opts', 'Zip', 'Jsi_AutoMake', 'Make', 
                    'Jsi_Main', 'Jsi_AutoPkg', 'Jsi_LogFile', 'Jsi_Run'],
                    modl=[];
                for (var i of Object.keys(Jsi_Auto)) {
                    if (i.substr(0,4) != 'Jsi_') continue;
                    if (nowork.indexOf(i)>=0) continue;
                    modl.push(i);
                }
                rv += ljoin(modl, 68, '     ');
             
        } else {
            var lst, alst = str.split('. ');
            if (alst.length===1 || alst.length == 2) {
                var anam=alst.join('.'), tinf=Info.cmds(anam);
                LogTrace('Tinf:', tinf);
                if (!tinf.length) {
                    rv = 'no such command "'+anam+'"';
                    try {
                        require(anam);
                        moduleRun(anam, ['-help', true]);
                    } catch (e) {
                      try {
                          Interp.conf({pkgDirs:[File.pwd()]});
                          require(anam);
                          moduleRun(anam, ['-help', true]);
                      } catch (e) {
                          rv = e;
                      }
                    }
                    return rv;
                }
 
                switch (tinf.type) {
                    case 'object':
                        rv += DumpObj(tinf);
                        break;
                    case 'command':
                        rv += DumpCmd(tinf);
                        break;
                    default:
                        throw "bad id";
                        continue;
                }           
            }
        }
        return rv;
    }
    
    function main() {
        LogTrace('Starting');
        debugger;
        if (args.length>1)
            throw 'expected 0 or 1 args';
        var rv, arg = (args.length?args[0]:'');
        if (self.web) {
            rv = dumpWeb();
            if (!self.wiki) {
                if (require('Websrv')<0)
                    throw "websrv unavailable";
                var css = File.read('/zvfs/lib/www/jsiweb.css');
                rv = '<style>'+css+'</style>\n' + rv;
                var anchor = (arg===''?'':'#'+arg);
                if (System[arg])
                    anchor = '#System';
                else if (arg.indexOf('.')>0)
                    anchor = '#'+arg.split('.')[0];
                Websrv([], {pageStr:rv, anchor:anchor, timeout:self.timeout});
                rv = '';
            }
        } else {
            rv = help(arg);
            if (self.max>0) {
                var rvl = rv.split('\n');
                if (rvl.length>self.max)
                    rv = rvl.slice(0, self.max).join('\n')+'\n... (prefix with "-max 0" for more)';
            }
        }
        return rv;
    }
    
    return main();
}

module(Help, 1, {logmask:'trace'});

